---
title: "Analysis of code sharing practices in archaeology using open-archaeo and JCAA"
author: "Sophie C. Schmidt"
date:  "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    fig-width: 10
    fig-height: 4
    code-fold: true
#  docx:
#    fig-width: 10
#    fig-height: 4
---

## Analysis of JCAA articles regarding code sharing

```{r}
#| label: open archaeo data loading
#| warning: FALSE


library(here)
path <- here("analysis" ,"data", "open-archaeo-data", "oarch.RData" )

load(path)

library(dplyr)

oarch3 <- oarch |>
  mutate(
    pub = case_when(
    !is.na(publication) ~ "publication",
    !is.na(website) ~ "website",
    !is.na(blogpost) ~ "blogpost",
    !is.na(github) ~ "github",
    !is.na(gitlab) ~ "gitlab",
    !is.na(bitbucket) ~ "bitbucket",
    !is.na(gist) ~ "gist",
    !is.na(codeberg) ~ "codeberg"),
    advertisement = case_when(
      pub == "publication" ~ "yes",
      pub == "website" ~ "yes",
      pub == "blogpost" ~ "yes"))

pubs <- colnames(oarch[,3:16])

library(tidyr)

oarch5 <- oarch3 %>% pivot_longer(cols=colnames(oarch[,3:16]),
                                  names_to='publication',
                                  values_to='pub_form')

oarch5 <- oarch5 |>
  filter(!is.na(pub_form))

```



### Analysis of Open Archaeo data

```{r}
#| label: fig-oadistribution
#| fig-cap: "ways  of distributing software listed on open-archaeo.info. Red - software that is linked to a paper, website or blog, indicating some advertisement of the software product"
#| warning: false

library(ggplot2)
library(forcats)


oarch5 %>%
  ggplot(aes(x = fct_infreq(publication), fill = advertisement))+
  geom_bar()+
  guides(fill = "none") +
 # scale_x_discrete(name="Publication",
  #                 labels=c("Github", "Website", "Paper", "Codeberg", "Blogpost", "Gist", "Gitlab", "Bitbucket",  "Other"))+
  labs(title = "How is the software distributed?",
       caption = "Data: open-archaeo.info (double mentions)",
       x = NULL, y = NULL)+
  theme_minimal()+
  theme(text = element_text(size = 20)) +
  coord_flip()
```



### Analysis of JCAA articles and code sharing

```{r}
#| label: load data of JCAA table
#| warning: FALSE 

path <- here("analysis", "data", "articles_code_JCAA_2018-2023.ods" )

d <- readODS::read_ods(path = path)


library(dplyr)
library(tidyr)
library(stringr)


d1 <- d |>
  mutate(a = case_when(
    str_detect(available, "https|printed", F) ~ "yes",
    TRUE ~ "no"
  )) |>
  filter(a == "yes",
         str_detect(Code, "no", T))


## load general JCAA data

path <- here("analysis", "data", "JCAA_all_papers_per_year.ods" )

JCAA <- readODS::read_ods(path = path)

jcaa1 <- JCAA |>
  group_by(Year) |>
  summarise(Frequency = sum(n))

jcaa1$Year[jcaa1$Year == "2023 (until August)"] <- "2023"
jcaa1$Year <- as.numeric(jcaa1$Year)  


```


### where is the code published?


```{r}
#| label: check for repos in persistend IDs
# data bla

library(dplyr)
library(stringr)

d2 <- d1 |>
    mutate(repo = case_when(
   str_detect(available, "zenodo", F) ~ "zenodo",
   str_detect(available, "OSF", F) ~ "osf",
   str_detect(available, "jcaa.", F) ~ "supplementary",
   pid == "n"  ~ NA,
  TRUE ~ "div"
  ))
```


```{r}
#| label: fig-repo
#| fig-cap: Repositories used for code that give PIDs.


ggplot()+  
    geom_line(data = jcaa1,
            aes(x = Year,
                y = Frequency))+
  geom_bar(data = d2, aes(x = year,
               fill = repo))+
    scale_x_continuous(breaks = 2018:2023,
                   labels = c("2018", "2019", "2020", "2021", "2022", "2023 \n(until August)"))+
  scale_fill_viridis(discrete = T,
                     name = "Repository",
                     breaks = c("osf", "supplementary", "zenodo", "div", NA),
                     labels = c("OSF.io", "JCAA supplementary", "Zenodo.org", "other", "no PID"),
                     na.value = "lightgrey")+   # I wanted NAs to be grey and to have a label
  scale_y_continuous(name = "Number of articles",
    breaks = seq(0,20, 4))+
   annotate("text", x = 2023, y = 2, label = "grey: no PID", hjust = -5, size = 5)+
  annotate(geom = "text",
    label = "total number\nof articles per\nyear in JCAA",
           x = 2022.01,
           y = 17,
    hjust = 0,
    vjust = 0,
    size = 3)+
  theme_bw()+
    theme(text = element_text(size = 20))

ggsave("./figures/repo_for_pid_per_year_all_b.jpg", dpi = 300, width = 10, height = 4)
  
```
-> shows consistent preference of zenodo

```{r}
#| label: check repo vs metadata

d3 <- d2

d3$repo[is.na(d3$repo)] <- "no PID"

table(d3$repo, d3$metadata)
```

The black line denotes the number of JCAA articles all in all. Added because this has influence on nr of articles in sample.
Peak at 2020 is probably related to the drop-off because of covid pandemic.
Seems to be a rise in percentage of use of persistent identifiers (if 2021 is considered an outlier).

Not sure: When did JCAA implement reproducibility guidelines? From the very start?

### Documentation


Most of the time a README is the most elaborate description of the code (comments on top).

```{r}
#| label: fig-doclength
#| fig-cap: "documentation of software, length and year"
#| warning: false
 
d1$doc_length <- factor(d1$doc_length, ordered = T,
                        levels = c("little", "some", "good"))
d1$documentation <- factor(d1$documentation, ordered = T,
                           levels = c("none", "comments", "README", "manuals"))

d1 |>
ggplot()+
  geom_jitter(aes(x = year,
                 y = doc_length,
                 col = documentation,
                 shape = as),
              width = 0.2, 
              height = 0.2,
              alpha = 0.9,
              size = 2.5)+
  labs(y = "length of documentation")+
    scale_colour_viridis(discrete = TRUE)+
   annotate(geom="text",
           x = 2019, 
           y = 4.5, 
           label="points jittered by 20% to reduce overlap",
           size = 3)+
     annotate(geom="text",
           x = 2023, 
           y = 0.5, 
           label="n = 21",
           size = 3)+
  theme_bw()+
      theme(text = element_text(size = 20))


ggsave("./figures/doc_length_kind_per_year.jpg", dpi = 300, width = 10, height = 4)

```

Length of documentation seems to grow -> mostly READMEs or Manuals -> sign of people thinking more about re-use of code?



### Metadata

```{r}

#| label: fig-metadata
#| fig-cap: "metadata of software"
#| warning: false
## metadata: ordered factor

d1$metadata <- factor(d1$metadata, ordered = T,
                      levels = c("no", "little", "some", "plenty"))

d1 |>
  ggplot()+
  geom_bar(aes(x = year,
               fill = metadata))+
  scale_x_continuous(breaks = 2018:2023,
                   labels = c("2018", "2019", "2020", "2021", "2022", "2023 \n(until August)"))+
  scale_fill_viridis(discrete = T)+
  geom_line(data = jcaa1,
            aes(x = Year,
                y = Frequency))+
  ylab("Number of Articles")+
  theme_bw()+
  theme(text = element_text(size = 20))


ggsave("./figures/metadata_per_year.jpg", dpi = 300, width = 8, height = 4)
```

Importance of metadata seems to grow.
Little metadata gets "automatically" assigned in DOI-giving repositories (zenodo and osf), as well as some basics in Github: e.g. author, programming language. More elaborate metadata can be uploaded eg for Github Collections via https://collectionbuilder.github.io/cb-docs/docs/metadata/uploading/, or with a DESCRIPTION file or similar in zenodo and OSF using the structured questionnaires


Adding more metadata (such as keywords, etc) is done consciously.


-> zenodo offers most metadata.

## analysis excluded from paper


### Persistent identifiers

```{r}
#| label: fig-pid
#| fig-cap: "Use of persistent identifiers for code in JCAA articles"
#| warning: false

library(ggplot2)

library(viridis)

ggplot()+
  geom_line(data = jcaa1,
            aes(x = Year,
                y = Frequency))+
  geom_bar(data = d1, aes(x = year,
               fill = pid))+
  xlab("Year of publication")+
  ylab("Number of publications")+
  scale_x_continuous(breaks = 2018:2023,
                   labels = c("2018", "2019", "2020", "2021", "2022", "2023 \n(until August)"))+
  scale_fill_viridis(discrete = TRUE,
                      name="Persistent identifiers \nfor published code") + 
  annotate(geom = "text",
    label = "total number of articles per year\n in JCAA",
           x = 2021.5,
           y = 19 )+
  theme_bw()

ggsave("./figures/PIDs_per_year.jpg", dpi = 300, width = 8, height = 4)

```
-> already covered in "where is published"


### "aim" of software
```{r}
#| label: fig-aims
#| fig-cap: "Aim of the software over time"
#| warning: false

d1 |>
  ggplot()+
  geom_bar(aes(x = year,
               fill = aim))+
  geom_line(data = jcaa1,
            aes(x = Year,
                y = Frequency))+
    scale_x_continuous(breaks = 2018:2023,
                   labels = c("2018", "2019", "2020", "2021", "2022", "2023 \n(until August)"))+
  scale_fill_viridis(discrete = TRUE,
                     name = "Reason of publishing the code")+
    annotate(geom = "text",
    label = "total number of articles per year\n in JCAA",
           x = 2022,
           y = 19 )+
  theme_bw()

ggsave("./figures/aims_per_year.jpg", dpi = 300, width = 8, height = 4)


```
Seems to be a more or less consistent percentage of research software development in relation to article reproducibility
1 NA is due to DOI not resolving anymore. 
Maybe a bit difficult to assign aims the authors may have intended, therefore excluded from paper. 


### Kind of software

```{r}
#| label: fig-as
#| fig-cap: "Format of software"
#| warning: false

d1 |>
  ggplot()+
  geom_bar(aes(x = as.numeric(year),
               fill = as))+
  geom_line(data = jcaa1,
            aes(x = as.numeric(Year),
                y = Frequency))+
  theme_bw()
```
Most are compendiums and scripts, more rarely complete packages (extensions of software) or stand-alone software.

--> doubles info from archaeo-info?



### Github and PIDs
```{r}
#| label: fig-gh
#| fig-cap: "documentation of software, length and year"
#| warning: false
 
d1$doc_length <- factor(d1$doc_length, ordered = T,
                        levels = c("little", "some", "good"))
d1 |>
ggplot()+
  geom_jitter(aes(x = year,
                 y = doc_length,
                 col = gh,
                 shape = pid),
              width = 0.2, 
              height = 0.2,
              alpha = 0.9)+
  labs(y = "length of documentation")+
   annotate(geom="text",
           x = 2019, 
           y = 4.5, 
           label="points jittered by 20% to reduce overlap",
           size = 3)+
       annotate(geom="text",
           x = 2023, 
           y = 0.5, 
           label="n = 21",
           size = 3)+
  theme_bw()

```

Check GH + PID, just GH or just PID

```{r}
d1 |>
  mutate(v = 
           case_when(
    (gh == "y") & (pid == "y") ~ "gh and pid",
    (gh == "y") & (pid == "n") ~ "gh",
    (gh == "n") & (pid == "y") ~ "pid",
     is.na(gh) & (pid == "y") ~ "pid"
  )) |>
  ggplot()+
  geom_jitter(aes(x = year,
                 y = doc_length,
                 col = v,
                 shape = documentation),
              width = 0.2, 
              height = 0.2,
              alpha = 0.9)+
  labs(y = "length of documentation")+
   annotate(geom="text",
           x = 2019, 
           y = 4.5, 
           label="points jittered by 20% to reduce overlap",
           size = 3)+
       annotate(geom="text",
           x = 2023, 
           y = 0.5, 
           label="n = 21",
           size = 3)+
  theme_bw()


```
READMEs not restricted to github -> though maybe more extensive there?


```{r}
#| label: fig-doc
#| fig-cap: "documentation of software"
#| warning: false

# documentation
## comments = ONLY comments, README (may also contain comments) as main info and manuals as extra on top
d1 |>
  ggplot()+
  geom_bar(aes(x = as.numeric(year),
               fill = documentation))+
  geom_line(data = jcaa1,
            aes(x = as.numeric(Year),
                y = Frequency))+
  theme_bw()

```
## Github and Zenodo an Metadata

```{r}
table(d2$gh, d2$repo)


```

