---
title: "Analysis of code sharing practices in archaeology using open-archaeo and JCAA"
author: "Sophie C. Schmidt"
date:  "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    fig-width: 10
    fig-height: 4
    code-fold: true
#  docx:
#    fig-width: 10
#    fig-height: 4
---

## Open Archaeo

```{r}
#| label: open archaeo data loading
#| warning: FALSE

# the data is provided by https://github.com/zackbatist/caa2021-openarchaeo 
library(knitr)
library(here)
path <- here("analysis" ,"data", "open-archaeo-data", "oarch.RData" )
load(path)

library(dplyr)

# restructure to get one column with info where the code is linked to

oarch3 <- oarch |>
  mutate(
    pub = case_when(
    !is.na(publication) ~ "publication",
    !is.na(website) ~ "website",
    !is.na(blogpost) ~ "blogpost",
    !is.na(github) ~ "github",
    !is.na(gitlab) ~ "gitlab",
    !is.na(bitbucket) ~ "bitbucket",
    !is.na(gist) ~ "gist",
    !is.na(codeberg) ~ "codeberg"),
    advertisement = case_when(
      pub == "publication" ~ "yes",
      pub == "website" ~ "yes",
      pub == "blogpost" ~ "yes"))

pubs <- colnames(oarch[,3:16])

library(tidyr)

#pivot table long -> nr of observations increases (double mentions!)
oarch5 <- oarch3 %>% pivot_longer(cols=colnames(oarch[,3:16]),
                                  names_to='publication',
                                  values_to='pub_form')

oarch5 <- oarch5 |>
  filter(!is.na(pub_form))

```



### Open archaeo: "Advertisement"

```{r}
#| label: fig-oadistribution
#| fig-cap: "ways  of distributing software listed on open-archaeo.info. Red - software that is linked to a paper, website or blog, indicating some advertisement of the software product"
#| warning: false

library(ggplot2)
library(forcats) #for fct_infreq which oders the bars in the barplot


oarch5 %>%
  ggplot(aes(x = fct_infreq(publication),
             fill = advertisement))+
  geom_bar()+
  guides(fill = "none") +
  scale_x_discrete(breaks = c("github", "website", "publication", "codeberg", "blogpost", "gist", "gitlab", "bitbucket", "DOI", "twitter", "youtube", "launchpad", "pypi", "cran"),
    labels=c("Github", "Website", "Scientific Publication", "Codeberg", "Blogpost", "Gist", "Gitlab", "Bitbucket",  "Repository with PID", "Twitter", "YouTube", "Launchpad", "PyPI", "CRAN"))+
  labs(title = "Correlation of distribution platform and advertisement",
       caption = "Data: open-archaeo.info (double mentions)",
       x = NULL, y = NULL)+
  theme_minimal()+
  theme(text = element_text(size = 20)) +
  coord_flip()

ggsave("./figures/oarch_dist_new.jpg", dpi = 300, width = 275, height = 125, units = "mm")

```


### Open archaeo: Distribution of software and publication

```{r}
#| label: see how kind of software correlates with publication
#| warning: false


library(viridis)

# some summarizing:
oarch4 <- oarch5 |>
  mutate(publication = case_when (
         publication == "bitbucket" ~ "other",
         publication == "codeberg" ~ "other",
         publication == "gitlab" ~ "other",
         publication == "launchpad" ~ "other",
         publication == "gist" ~ "other",
         publication == "youtube" ~ "social media",
         publication == "twitter" ~ "social media",
         publication == "cran" ~ "PyPI/CRAN",
         publication == "pypi" ~ "PyPI/CRAN",
         TRUE ~ publication
         ) ) 

oarch4$publication <- factor(oarch4$publication, ordered = T,
                             levels = c("github", "other", "PyPI/CRAN", "website", "blogpost", "social media", "DOI", "publication"))

```


```{r}
#| label: fig-corr_category-pub
#| fig-cap: "Correlation of category and kind of publication"
#| 

oarch4 |>
  group_by(publication, category) |>
  count() |>
  ggplot()+
  geom_col(aes(x = fct_infreq(category, w = n),
               y = n,
               fill = publication))+
   scale_fill_viridis(discrete = T,
                      name = "Venue of publication/\nadvertisement",
                      breaks = levels(oarch4$publication),
                      labels = c("Github", "Github alternative", "Dedicated library", "Website", "Blogpost", "Social Media", "Repository with PID", "Scientific Publication"))+
    labs(title = "Most popular categories",
         subtitle = "By number of projects and ways of distribution",
       caption = "Data: open-archaeo.info (double mentions)",
       x = NULL, y = NULL)+
  theme_bw()+
  theme(text = element_text(size = 20)) +
  coord_flip() +
  scale_x_discrete(labels = c("Specifications, protocols and schemas" = "Specifications, protocols\nand schemas"))


ggsave("./figures/oarch_software_distribution_new.jpg", dpi = 300, width = 14, height = 8)  

# chi square wouldn't work, too many zeroes. 
```



## Analysis of JCAA articles and code sharing

```{r}
#| label: load data of JCAA table
#| warning: FALSE 

path <- here("analysis", "data", "articles_code_JCAA_2018-2023.csv" )

d <- read.csv2(path, sep = ";")

library(dplyr)
library(tidyr)
library(stringr)

# find only those with code available
d1 <- d |>
  mutate(a = case_when(
    str_detect(available, "https|printed", F) ~ "yes",
    TRUE ~ "no"
  )) |>
  filter(a == "yes",
         str_detect(Code, "no", T))


## load general JCAA data for comparison

path <- here("analysis", "data", "JCAA_all_papers_per_year.csv" )

JCAA <- read.csv2(path, sep = ";")
  
jcaa1 <- JCAA |>
  group_by(Year) |>
  summarise(Frequency = sum(n))

jcaa1$Year[jcaa1$Year == "2023 (until August)"] <- "2023"
jcaa1$Year <- as.numeric(jcaa1$Year)  


```


### Repositories and Persistend IDs


```{r}
#| label: check for repos and persistend IDs
# data manipulation

library(dplyr)
library(stringr)

d2 <- d1 |>
    mutate(repo = case_when(
   str_detect(available, "zenodo", F) ~ "zenodo",
   str_detect(available, "OSF", F) ~ "osf",
   str_detect(available, "jcaa.", F) ~ "supplementary",
   pid == "n"  ~ NA,
  TRUE ~ "div"
  ))
```


```{r}
#| label: fig-repo
#| fig-cap: Repositories used for code that give PIDs.

library(viridis)

ggplot()+  
    geom_line(data = jcaa1,
            aes(x = Year,
                y = Frequency))+
  geom_bar(data = d2, aes(x = year,
               fill = repo))+
    scale_x_continuous(breaks = 2018:2023,
                   labels = c("2018", "2019", "2020", "2021", "2022", "2023 \n(until August)"))+
  scale_fill_viridis(discrete = T,
                     name = "Repository",
                     breaks = c("osf", "supplementary", "zenodo", "div", NA),
                     labels = c("OSF.io", "JCAA supplementary", "Zenodo.org", "other", "no PID"),
                     na.value = "lightgrey")+   # I wanted NAs to be grey and to have a label
  scale_y_continuous(name = "Number of articles",
    breaks = seq(0,20, 4))+
   annotate("text", x = 2023, y = 2, label = "grey: no PID", hjust = -5, size = 5)+
  annotate(geom = "text",
    label = "total number\nof articles per\nyear in JCAA",
           x = 2022.01,
           y = 17,
    hjust = 0,
    vjust = 0,
    size = 3)+
  theme_bw()+
    theme(text = element_text(size = 20))

ggsave("./figures/repo_for_pid_per_year_all_b.jpg", dpi = 300, width = 10, height = 4)
  
```
Graph shows consistent preference of zenodo.

The black line denotes the number of JCAA articles all in all. Added because this has influence on nr of articles in sample.
Peak at 2020 is probably related to the drop-off because of covid pandemic.
Seems to be a rise in percentage of use of persistent identifiers (if 2021 is considered an outlier).



### Documentation

```{r}
#| label: fig-doclength
#| fig-cap: "documentation of software, length and year"
#| warning: false
 
d1$doc_length <- factor(d1$doc_length, ordered = T,
                        levels = c("little", "some", "good"))

d1$documentation <- factor(d1$documentation, ordered = T,
                           levels = c("none", "comments", "README", "manuals"))

d1 |>
  filter(!is.na(documentation))|>
ggplot()+
  geom_jitter(aes(x = year,
                 y = doc_length,
                 shape = as,
                 col = documentation),
              width = 0.2, 
              height = 0.2,
              alpha = 0.9,
              size = 2.5,
              na.rm = TRUE)+
  labs(title = "Code organisation and documentation",
       y = "Length of documentation",
       x = "Year of publication")+
    scale_colour_viridis(discrete = TRUE,
                         name = "Documentation:")+
  scale_shape_discrete(name = "Code as:")+
   annotate(geom="text",
           x = 2018, 
           y = 3.5, 
           label="Points jittered by 20% to reduce overlap",
           size = 4,
           hjust = 0)+
     annotate(geom="text",
           x = 2023, 
           y = 0.5, 
           label=paste0("n = ", nrow(d1 |>  filter(!is.na(documentation))) ),
           size = 4)+
  theme_bw()+
      theme(text = element_text(size = 20))


ggsave("./figures/doc_length_kind_per_year_narm2.jpg", dpi = 300, width = 10, height = 4)

```
Most of the time a README is the most elaborate description of the code (= comments + README).

Length of documentation seems to grow, number of publications with only comments decreases over time. This could be a sign of people thinking more about the re-use of code.



### Metadata

```{r}
#| label: fig-metadata
#| fig-cap: "metadata availability of software"
#| warning: false

## metadata as ordered factor

d1$metadata <- factor(d1$metadata, ordered = T,
                      levels = c("no", "little", "some", "plenty"))

d1 |>
  ggplot()+
  geom_bar(aes(x = year,
               fill = metadata))+
  scale_x_continuous(breaks = 2018:2023,
                   labels = c("2018", "2019", "2020", "2021", "2022", "2023 \n(until August)"))+
  scale_fill_viridis(name = "Metadata",
                     discrete = T,
                     na.value = "lightgrey")+
  geom_line(data = jcaa1,
            aes(x = Year,
                y = Frequency))+
  labs(title = "Metadata availability",
       y = "Number of Articles")+
  theme_bw()+
  annotate(geom = "text",
    label = "total number\nof articles per\nyear in JCAA",
           x = 2022.3,
           y = 15.5,
    hjust = 0,
    vjust = 0,
    size = 4)+
  theme(text = element_text(size = 20))


ggsave("./figures/metadata_per_year2.jpg", dpi = 300, width = 8, height = 4)
```

Importance of metadata seems to grow.
Little metadata gets "automatically" assigned in DOI-giving repositories (zenodo and osf), as well as some basics in Github: e.g. author, programming language. More elaborate metadata can be uploaded eg for Github Collections via https://collectionbuilder.github.io/cb-docs/docs/metadata/uploading/, or with a DESCRIPTION file or similar in zenodo and OSF using the structured questionnaires.

Adding more metadata (such as keywords, etc) is done consciously.

```{r}
#| label: tbl-repo_metadata
#| tbl-cap: "Metadata and Repository"

d3 <- d2

d3$repo[is.na(d3$repo)] <- "no PID"

kable(table(d3$repo, d3$metadata))
```

Table shows: Zenodo is linked to most metadata (partly only indirectly via Github, shows people who care about making research reproducible by giving DOIs also add some more metadata)

